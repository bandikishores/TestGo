syntax = "proto3";
package data;

import "protoc-gen-swagger/options/annotations.proto";
import "google/rpc/status.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "gogoproto/gogo.proto";

import "addressbook.proto";

option (gogoproto.goproto_registration) = true;

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Bandi User";
		version: "1.0";
		contact: {
			name: "Bandi";
			url: "https://bandikishores.com/";
			email: "support@bandikishores.com";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
    };
    
    security_definitions: {
		security: {
            key: "ApiKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
                name: "X-API-KEY";
                description: "Clients need to provide the x-api-key during a call in header"
                extensions: {
					key: "x-api-key";
					value {
						string_value: "id";
					}
                }
            }
        }
        security: {
            key: "OrgIdHeader";
			value: {
				type: TYPE_BASIC;
				in: IN_HEADER;
                name: "X-ORG-ID";
                description: "Clients need to provide the Organization Id in the header against which the API call is being made"
                extensions: {
					key: "x-org-id";
					value {
						string_value: "id";
					}
                }
            }
        }
	}
	security: {
		security_requirement: {
			key: "ApiKeyAuth";
			value: { 
            };
		}
		security_requirement: {
			key: "OrgIdHeader";
			value: { 
            };
		}
	}
};

message User {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		example: { value: '{ "name": "Kishore" }' }
    };
    // This is my custom comments which shouldn't appear in documents as long as title is provided.
  string name = 1 [
      (google.api.field_behavior) = REQUIRED,
      (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "User Name title", description: "Name of the User", pattern: "^[A-Za-z0-9]+$", min_length: 1, required: ['name']}];
  string displayName = 2;
  Address contactAddress = 3;
  string email = 4;
  string ID = 5 [json_name = "_key", (gogoproto.jsontag) = "_key",
  (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {read_only: true}]; // JSON Marshaller will use _key
}

message CreateUserRequest {
  User user = 1;
  string orgName = 2;
}

message CreateUserResponse {
  string name = 1;
  google.rpc.Status status = 2;
}

message UpdateUserRequest{
    User user = 1;
    string orgName = 2;
    string name = 3;
}

message UpdateUserResponse{
    string name = 1;
    google.rpc.Status status = 2;
}

message DeleteUserRequest{
    string name = 1;
    string orgName = 2;
}

message DeleteUserResponse{
    string name = 1;
    google.rpc.Status status = 2;
}

message GetUserRequest{
    string name = 1;
    string orgName = 2;
    string queryParam1 = 3;
}

message GetUserResponse{
    User user = 1;
    google.rpc.Status status = 2;
}

// This is my User Service Comment
service UserService {
    
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_tag) = {
		description: "User Service Description!!!"
		external_docs: {
			url: "https://github.com/grpc-ecosystem/grpc-gateway";
			description: "Find out more about UserService";
		}
	};
  rpc GetUser(GetUserRequest) returns (GetUserResponse){
      option (google.api.http) = {
          get: "/organizations/{orgName}/users/{name}" 
          additional_bindings : [
            {
                get: "/users/{name}"
            }
          ]
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        description: "Description Get User";
        summary: "Summary: Get Service rpc";
        tags: "get service rpc";
        external_docs: {
            url: "https://github.com/grpc-ecosystem/grpc-gateway";
            description: "Find out more get service";
        }
        security: {
            security_requirement: {
                key: "ApiKeyAuth";
                value: {}
            },
            security_requirement: {
                key: "orgName";
                value: {}
            }
        }
    };
  }

  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse){
      option (google.api.http) = {
          post: "/organizations/{orgName}/users"
          body: "user"
      };

    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        description: "Description Create User";
        summary: "Summary: Create Service rpc";
        tags: "create service rpc";
        external_docs: {
            url: "https://github.com/grpc-ecosystem/grpc-gateway";
            description: "Find out more create service";
        }
        security: {
            security_requirement: {
                key: "ApiKeyAuth";
                value: {}
            }
        }
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse){
      option (google.api.http) = {
          put: "/organizations/{orgName}/users/{name}"
          body: "*"
          additional_bindings : [
            {
                put: "/users/{name}"
                body: "user"
            }
          ]
      };
  }

  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse){
      option (google.api.http) = {
          delete: "/organizations/{orgName}/users/{name}"
          additional_bindings : [
            {
                delete: "/users/{name}"
            }
          ]
      };
  }

  rpc StreamUsers(GetUserRequest) returns (stream GetUserResponse){
      option (google.api.http) = {
          get: "/organizations/{orgName}/streamusers/{name}"
          additional_bindings {
              get: "/streamusers/{name}"
          }
      };
  }
}


